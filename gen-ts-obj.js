// Generates ts key-codepoint mappings
//
// Usage:
// node gen-ts-obj <variantCount> <variantJson : 0> <variantName : 0> <variantJson : 1> <variantName : 1> ... <outputFile>

const fs = require('fs')

const variantCount = parseInt(process.argv[2]) ?? 1

if (!variantCount || isNaN(variantCount)) {
  console.error('No variants provided')
  console.info('Arguments: <variants : Integer> [...<jsonFile : 0> <variantName : 0> <jsonFile : 1> <variantName : 1>] <outputFile>')
  process.exit(1)
}

/**
 * @type {Record<string, string>}
 */
const variantFiles = {}

for (let i = 0; i < variantCount; i++) {
  const jsonFile = process.argv[3 + i * 2]
  const variantName = process.argv[4 + i * 2]

  if (!jsonFile || !variantName) {
    console.error('Variant file ' + i + ' was not provided; expected ' + variantCount + ' valid variants')
    console.info('Arguments: <variants : Integer> [...<jsonFile : 0> <variantName : 0> <jsonFile : 1> <variantName : 1>] <outputFile>')
    process.exit(1)
  }

  variantFiles[variantName] = jsonFile
}

const output = process.argv[3 + variantCount * 2]

/**
 * @type {Record<string, Record<string, number>>}
 */
const variants = {

}

for (const variantName in variantFiles) {
  const file = variantFiles[variantName]
  const content = fs.readFileSync(file, 'utf8')
  const parsed = JSON.parse(content)

  variants[variantName] = parsed
}

const header = `
// This is auto-generated file.
// DO NOT EDIT THIS FILE MANUALLY

export const codePoints = `

const footer = ` as const;

export type IconVariant = keyof typeof codePoints;
export type IconKey = typeof codePoints[IconVariant];
export default codePoints
`

const write = () => {
  let value = ''
  value += header

  value += JSON.stringify(variants, null, 2)

  value += footer
  
  return value
}

fs.writeFileSync(output, write(), 'utf8')
console.log(`File written to ${output}`)
